version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: tixgenius-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tixgenius}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tixgenius}
      POSTGRES_DB: ${POSTGRES_DB:-tixgenius}
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/data/postgres
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tixgenius}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - tixgenius-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: tixgenius-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-tixgenius} --loglevel warning
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tixgenius-network

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: tixgenius-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-tixgenius}:${POSTGRES_PASSWORD:-tixgenius}@postgres:5432/${POSTGRES_DB:-tixgenius}
      REDIS_URL: redis://:${REDIS_PASSWORD:-tixgenius}@redis:6379
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET:-supersecretkey}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      SESSION_SECRET: ${SESSION_SECRET:-anothersecretkey}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - tixgenius-network

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: tixgenius-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - tixgenius-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: tixgenius-adminer
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - tixgenius-network

volumes:
  postgres-data:
  redis-data:

networks:
  tixgenius-network:
    driver: bridge 