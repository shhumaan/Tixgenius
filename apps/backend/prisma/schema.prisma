// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole       @default(USER)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  phone             String?
  avatar            String?
  lastLogin         DateTime?
  teamId            String?
  team              Team?          @relation(fields: [teamId], references: [id])
  createdTickets    Ticket[]       @relation("TicketCreator")
  assignedTickets   Assignment[]
  complaints        Complaint[]
  createdAuditLogs  AuditLog[]     @relation("AuditLogCreator")
  targetAuditLogs   AuditLog[]     @relation("AuditLogTarget")
  developerProfile  Developer?

  @@index([email])
  @@index([teamId])
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  DEVELOPER
  USER
}

// Team model for grouping users
model Team {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  categories  Category[]
  
  @@map("teams")
}

// Developer model extends User
model Developer {
  id              String         @id @default(uuid())
  userId          String         @unique
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization  String[]
  experienceLevel ExperienceLevel
  gitHubUsername  String?
  slackId         String?
  availableFrom   DateTime?
  availableTo     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  assignments     Assignment[]

  @@index([userId])
  @@map("developers")
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
  LEAD
}

// Ticket categories
model Category {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamId        String?
  team          Team?    @relation(fields: [teamId], references: [id])
  tickets       Ticket[]
  parentId      String?
  parent        Category? @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")

  @@index([teamId])
  @@index([parentId])
  @@map("categories")
}

// Core ticket model
model Ticket {
  id              String         @id @default(uuid())
  title           String
  description     String
  status          TicketStatus   @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  dueDate         DateTime?
  resolvedAt      DateTime?
  creatorId       String
  creator         User           @relation("TicketCreator", fields: [creatorId], references: [id])
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id])
  assignments     Assignment[]
  complaints      Complaint[]
  attachments     String[]
  auditLogs       AuditLog[]

  @@index([creatorId])
  @@index([status])
  @@index([priority])
  @@index([categoryId])
  @@index([createdAt])
  @@map("tickets")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
  REOPENED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Assignment model for assigning tickets to users/developers
model Assignment {
  id            String    @id @default(uuid())
  ticketId      String
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  assigneeId    String
  assignee      User      @relation(fields: [assigneeId], references: [id])
  developerId   String?
  developer     Developer? @relation(fields: [developerId], references: [id])
  assignedAt    DateTime  @default(now())
  status        AssignmentStatus @default(ASSIGNED)
  notes         String?
  isActive      Boolean   @default(true)
  updatedAt     DateTime  @updatedAt

  @@unique([ticketId, assigneeId, isActive])
  @@index([ticketId])
  @@index([assigneeId])
  @@index([developerId])
  @@map("assignments")
}

enum AssignmentStatus {
  ASSIGNED
  ACCEPTED
  REJECTED
  COMPLETED
  REASSIGNED
}

// Complaint model for complaints about tickets or service
model Complaint {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  ticketId    String?
  ticket      Ticket?   @relation(fields: [ticketId], references: [id])
  title       String
  description String
  status      ComplaintStatus @default(SUBMITTED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?
  resolution  String?

  @@index([userId])
  @@index([ticketId])
  @@index([status])
  @@map("complaints")
}

enum ComplaintStatus {
  SUBMITTED
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

// AuditLog for tracking changes in the system
model AuditLog {
  id              String      @id @default(uuid())
  action          String
  entityType      String
  entityId        String
  createdAt       DateTime    @default(now())
  createdById     String
  createdBy       User        @relation("AuditLogCreator", fields: [createdById], references: [id])
  targetUserId    String?
  targetUser      User?       @relation("AuditLogTarget", fields: [targetUserId], references: [id])
  ticketId        String?
  ticket          Ticket?     @relation(fields: [ticketId], references: [id])
  oldValues       Json?
  newValues       Json?
  ipAddress       String?
  userAgent       String?

  @@index([entityType, entityId])
  @@index([createdById])
  @@index([targetUserId])
  @@index([ticketId])
  @@index([createdAt])
  @@map("audit_logs")
} 